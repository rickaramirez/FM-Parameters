/**
 * =====================================
 * # ( name ; value )
 *
 * RETURNS:
 *		An name-value pair in Let notation.
 *
 * PARAMETERS:
 *		name: The name for the returned name-value pair. name can be any value
 *		that would be a valid Let() variable name.
 *		value: The value for the returned name-value pair.
 *
 * EXAMPLE:
 *		# ( "name"; $value ) & # ( "foo" ; "bar" )
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		MODIFIED on 2013-01-14 by Daniel Smith dansmith65@gmail.com to include
 *		trailing return on error result and accept a value of "?"
 *		MODIFIED on 2012-12-12 by Daniel Smith dansmith65@gmail.com to preserve
 *		data type of value
 *		MODIFIED on 2012-12-07 by Jeremy Bante <http://scr.im/jbante> where an
 *		error result could create invalid sytax for values containing a comment
 *		close sequence.
 *		MODIFIED on 2012-11-28 by Jeremy Bante <http://scr.im/jbante> to return
 *		error feedback, and to prefix names with "$".
 *		CREATED on 2012-11-10 by Jeremy Bante <http://scr.im/jbante>.
 * =====================================
 */

Let ( [
	// characters used as separators in a date field
	~DATECHARS = "\/-" ;
	// characters used as separators in a time field
	~TIMECHARS = ":" ;
	
	~name =	// strip leading "$$" and "$"
		Substitute (
			"/*start*/" & name;
			[ "/*start*/$$" ; "" ];
			[ "/*start*/$" ; "" ];
			[ "/*start*/" ; "" ]
		);
	~value =
		Case (
			// test for specific values that will be treated as a number in the next section
			value = "" or value = "?" ;
			Quote ( value ) ;
			
			value ≠ GetAsNumber ( value ) ;
			Quote ( value ) ;
			
			// value is a number, timestamp, date, or time
			Case (
				// negative time value
				value < 0 and not IsEmpty ( Filter ( value ; ~TIMECHARS ) ) ;
				"GetAsTime ( " & Quote( value ) & " )" ;
				
				not IsEmpty ( Filter ( value ; ~DATECHARS ) )
					and not IsEmpty ( Filter ( value ; ~TIMECHARS ) )
				;
				"GetAsTimestamp ( " & Quote( value ) & " )" ;
				
				not IsEmpty ( Filter ( value ; ~TIMECHARS ) ) ;
				"GetAsTime ( " & Quote( value ) & " )" ;
				
				/**
				 * At this point, if value is less than 1, it must be either
				 * a negative number or a decimal exponent.
				 * This section must be after test for time because time can
				 * contain a negative number.
				 * This section should be before test for date, because a date
				 *   can contain a -, which is also used for a negative number.
				 */
				value < 1 ;
				"GetAsNumber ( " & GetAsNumber( value ) & " )" ;
				
				not IsEmpty ( Filter ( value ; ~DATECHARS ) ) ;
				"GetAsDate ( " & Quote( value ) & " )" ;

				/**
				 * either a number, or:
				 * if the ~DATECHARS and ~TIMECHARS variables do not contain the
				 * separator chars in use on the current computer, store the
				 * date/time/timestamp as a number
				 */
				"GetAsNumber ( " & GetAsNumber( value ) & " )"
			)
		) ;
	~result =
		"$"
		& ~name
		& " = "
		& ~value
		& ";¶";
	~testExpression =
		"Let ( [ "
		& ~result
		& " ~ = \"\" ]; \"\" )";
	~error =
		Case (
			IsEmpty ( ~name );
				11;	// Name is not valid

			not IsValidExpression ( ~testExpression );
				1200	// Generic calculation error
		)
];
	If ( ~error;	// prevent bad pairs from affecting evaluation by commenting
		"/* Error "
		& ~error
		& " name: "
		& Quote (
			Substitute (	// escape comment character sequences
				name ;
				[ "*/" ; "\*\/" ];
				[ "/*" ; "\/\*" ]
			)
		)
		& " value: "
		& Quote (
			Substitute (	// escape comment character sequences
				value ;
				[ "*/" ; "\*\/" ];
				[ "/*" ; "\/\*" ]
			)
		)
		& " */"
		& ¶;
	/* Else */
		~result
	)
)